#!/usr/bin/env python3
"""
Planning Agent Node Test
Í≥ÑÌöç ÎÖ∏ÎìúÍ∞Ä ÏøºÎ¶¨Î•º ÏÑúÎ∏åÌÉúÏä§ÌÅ¨Î°ú Ïò¨Î∞îÎ•¥Í≤å Î∂ÑÌï¥ÌïòÎäîÏßÄ ÌÖåÏä§Ìä∏
"""

import sys
import asyncio
from pathlib import Path
from pprint import pprint

# ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent.parent.parent))

from workflow.nodes.planning_agent import PlanningAgentNode
from workflow.state import MVPWorkflowState


async def test_planning_agent():
    """Planning Agent ÎÖ∏Îìú ÌÖåÏä§Ìä∏"""
    print("=" * 60)
    print("Planning Agent Node Test")
    print("=" * 60)
    
    # ÎÖ∏Îìú ÏÉùÏÑ±
    node = PlanningAgentNode()
    print("‚úÖ Node created successfully\n")
    
    # ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ Ï†ïÏùò
    test_cases = [
        {
            "name": "Problem Query - Oil Change",
            "query": "Ïò§Ïùº ÍµêÏ≤¥Ïóê ÎåÄÌï¥ ÏïåÎ†§Ï§ò",
            "expected_subtasks": 1,  # 1Í∞úÍ∞Ä Ï†ÅÏ†àÌï® (Îã®ÏàúÌïú Ïò§Ïùº ÍµêÏ≤¥ Ï†ïÎ≥¥)
            "description": "Î¨∏Ï†úÍ∞Ä ÎêòÎäî ÏøºÎ¶¨ - Ï∞®Îüâ ÏïàÏ†Ñ Í∏∞Îä•ÏúºÎ°ú ÏûòÎ™ª Ìï¥ÏÑùÎêòÎäî ÏºÄÏù¥Ïä§"
        },
        {
            "name": "Simple Query",
            "query": "ÏóîÏßÑ Ïò§Ïùº ÍµêÏ≤¥ Î∞©Î≤ï",
            "expected_subtasks": 1  # ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅ
        },
        {
            "name": "Complex Query",
            "query": "Ï∞®Îüâ ÏïàÏ†Ñ Í∏∞Îä•Í≥º Ïó∞ÎπÑ Ï†ïÎ≥¥, Í∑∏Î¶¨Í≥† Ï†ïÍ∏∞ Ï†êÍ≤Ä Ìï≠Î™©ÏùÑ ÏïåÎ†§Ï§ò",
            "expected_subtasks": 2  # ÏµúÏÜå 2Í∞ú Ïù¥ÏÉÅ
        },
        {
            "name": "English Query",
            "query": "How to change brake pads and check tire pressure",
            "expected_subtasks": 2  # ÏµúÏÜå 2Í∞ú Ïù¥ÏÉÅ
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'='*40}")
        print(f"Test Case {i}: {test_case['name']}")
        print(f"Query: {test_case['query']}")
        print("="*40)
        
        # Ï¥àÍ∏∞ state ÏÉùÏÑ±
        state = {
            "query": test_case["query"],
            "workflow_status": "started",
            "metadata": {},
            "subtasks": [],
            "current_subtask_idx": 0
        }
        
        try:
            # ÎÖ∏Îìú Ïã§Ìñâ
            result = await node(state)
            
            # Í≤∞Í≥º Í≤ÄÏ¶ù
            assert "subtasks" in result, "subtasks field missing"
            assert "current_subtask_idx" in result, "current_subtask_idx field missing"
            assert "workflow_status" in result, "workflow_status field missing"
            
            subtasks = result["subtasks"]
            print(f"\n‚úÖ Generated {len(subtasks)} subtasks:")
            
            for j, subtask in enumerate(subtasks, 1):
                print(f"\n  Subtask {j}:")
                print(f"    - Query: {subtask.get('query', 'N/A')}")
                print(f"    - Priority: {subtask.get('priority', 'N/A')}")
                print(f"    - Language: {subtask.get('search_language', 'N/A')}")
                print(f"    - Status: {subtask.get('status', 'N/A')}")
                print(f"    - ID: {subtask.get('id', 'N/A')[:8]}")
            
            # ÏµúÏÜå ÏÑúÎ∏åÌÉúÏä§ÌÅ¨ Ïàò Í≤ÄÏ¶ù
            if len(subtasks) >= test_case["expected_subtasks"]:
                print(f"\n‚úÖ Test passed: {len(subtasks)} >= {test_case['expected_subtasks']} subtasks")
            else:
                print(f"\n‚ö†Ô∏è  Less subtasks than expected: {len(subtasks)} < {test_case['expected_subtasks']}")
            
            # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÌôïÏù∏
            if "metadata" in result and "planning" in result["metadata"]:
                planning_meta = result["metadata"]["planning"]
                print(f"\nüìä Planning Metadata:")
                print(f"    - Strategy: {planning_meta.get('strategy', 'N/A')}")
                print(f"    - Complexity: {planning_meta.get('expected_complexity', 'N/A')}")
                
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "="*60)
    print("Planning Agent Test Completed")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(test_planning_agent())