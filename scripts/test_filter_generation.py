#!/usr/bin/env python3
"""
Advanced test for Search Filter Generation in SubtaskExecutor
Tests various query types that should trigger filter generation
"""

import sys
import logging
from pathlib import Path

# ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent.parent))

from workflow.graph import MVPWorkflowGraph

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


class FilterTestScenario:
    """ÌïÑÌÑ∞ ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§"""
    def __init__(self, query, expected_filter_type, description):
        self.query = query
        self.expected_filter_type = expected_filter_type
        self.description = description


def analyze_filter_generation(result):
    """ÌïÑÌÑ∞ ÏÉùÏÑ± Í≤∞Í≥º Î∂ÑÏÑù"""
    # ÏÉÅÌÉúÏóêÏÑú search_filter ÌôïÏù∏
    search_filter = result.get("search_filter")
    
    if search_filter:
        print("      ‚úÖ Filter generated:")
        for key, value in search_filter.items():
            if value:  # NoneÏù¥ ÏïÑÎãàÍ≥† Îπà Î¶¨Ïä§Ìä∏Í∞Ä ÏïÑÎãå Í≤ΩÏö∞Îßå
                print(f"         - {key}: {value}")
        return True
    else:
        print("      ‚ö†Ô∏è No filter generated (None)")
        return False


def run_test_scenario(scenario: FilterTestScenario):
    """Îã®Ïùº ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ Ïã§Ìñâ"""
    print(f"\n   üìù Test: {scenario.description}")
    print(f"      Query: '{scenario.query}'")
    print(f"      Expected: {scenario.expected_filter_type}")
    
    try:
        # ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉùÏÑ± Î∞è Ïã§Ìñâ
        workflow = MVPWorkflowGraph()
        result = workflow.run(scenario.query)
        
        # ÏóêÎü¨ Ï≤¥ÌÅ¨
        if result.get("error"):
            print(f"      ‚ùå Error: {result['error']}")
            return False
            
        # ÌïÑÌÑ∞ ÏÉùÏÑ± Î∂ÑÏÑù
        filter_generated = analyze_filter_generation(result)
        
        # ÏÑúÎ∏åÌÉúÏä§ÌÅ¨ Ï†ïÎ≥¥ Ï∂úÎ†•
        subtasks = result.get("subtasks", [])
        if subtasks:
            subtask = subtasks[0]
            extracted_info = subtask.get("extracted_info", {})
            if extracted_info:
                print("      üìã Extracted Info:")
                for key, value in extracted_info.items():
                    if value:
                        print(f"         - {key}: {value}")
        
        # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥
        metadata = result.get("metadata", {})
        executor_meta = metadata.get("subtask_executor", {})
        if executor_meta:
            filter_status = executor_meta.get("filter_generated", False)
            print(f"      üìä Metadata - Filter Generated: {filter_status}")
        
        return filter_generated
        
    except Exception as e:
        print(f"      ‚ùå Exception: {e}")
        return False


def main():
    """Î©îÏù∏ ÌÖåÏä§Ìä∏ Ìï®Ïàò"""
    print("=" * 70)
    print("SEARCH FILTER GENERATION TEST")
    print("=" * 70)
    
    # ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ Ï†ïÏùò
    test_scenarios = [
        # ÌéòÏù¥ÏßÄ Í¥ÄÎ†® ÏøºÎ¶¨
        FilterTestScenario(
            "6ÌéòÏù¥ÏßÄÏùò ÏïàÏ†ÑÎ≤®Ìä∏ Ï∞©Ïö© Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî",
            "page filter",
            "Korean page number query"
        ),
        FilterTestScenario(
            "page 245Ïùò ÏóîÏßÑ Ïò§Ïùº ÍµêÏ≤¥ Ï†àÏ∞®",
            "page filter",
            "English page number query"
        ),
        FilterTestScenario(
            "50ÌéòÏù¥ÏßÄÎ∂ÄÌÑ∞ 55ÌéòÏù¥ÏßÄÍπåÏßÄÏùò Ï†ïÎπÑ Ï£ºÍ∏∞",
            "page range filter",
            "Page range query"
        ),
        
        # Î¨∏ÏÑú ÌÉÄÏûÖ Í¥ÄÎ†® ÏøºÎ¶¨
        FilterTestScenario(
            "ÌëúÎ°ú Ï†ïÎ¶¨Îêú ÏóîÏßÑ Ïò§Ïùº ÏÇ¨ÏñëÏùÑ Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî",
            "category filter (table)",
            "Table category query"
        ),
        FilterTestScenario(
            "Í∑∏Î¶ºÏúºÎ°ú ÏÑ§Î™ÖÎêú ÏïàÏ†ÑÎ≤®Ìä∏ Ï∞©Ïö©Î≤ï",
            "category filter (figure)",
            "Figure category query"
        ),
        FilterTestScenario(
            "Ï†ÑÏûêÏãù ÌååÌÇπ Î∏åÎ†àÏù¥ÌÅ¨ Í¥ÄÎ†® Ïù¥ÎØ∏ÏßÄ",
            "entity filter (image)",
            "Image entity query"
        ),
        
        # ÌäπÏ†ï Î¨∏ÏÑúÎ™Ö Í¥ÄÎ†® ÏøºÎ¶¨
        FilterTestScenario(
            "GV80 Îß§Îâ¥ÏñºÏóêÏÑú Î∏åÎ†àÏù¥ÌÅ¨ ÏãúÏä§ÌÖú ÏÑ§Î™Ö",
            "source filter",
            "Specific document source query"
        ),
        FilterTestScenario(
            "owner's manualÏùò ÏïàÏ†Ñ Ï£ºÏùòÏÇ¨Ìï≠",
            "source filter",
            "Document name in English"
        ),
        
        # Î≥µÌï© ÌïÑÌÑ∞ ÏøºÎ¶¨
        FilterTestScenario(
            "245ÌéòÏù¥ÏßÄÏùò ÌëúÏóêÏÑú Ïò§Ïùº Ïö©Îüâ ÌôïÏù∏",
            "page + category filter",
            "Complex filter with page and table"
        ),
        FilterTestScenario(
            "GV80 Îß§Îâ¥Ïñº 6ÌéòÏù¥ÏßÄÏùò Í∑∏Î¶º",
            "source + page + category filter",
            "Multiple filter conditions"
        ),
        
        # ÌïÑÌÑ∞Í∞Ä ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïÑÏïº ÌïòÎäî ÏøºÎ¶¨
        FilterTestScenario(
            "ÏóîÏßÑ Ïò§Ïùº ÍµêÏ≤¥ Î∞©Î≤ï",
            "no filter",
            "General query without specific filters"
        ),
        FilterTestScenario(
            "ÏïàÏ†ÑÎ≤®Ìä∏ Ï∞©Ïö©Ïùò Ï§ëÏöîÏÑ±",
            "no filter",
            "Abstract query"
        )
    ]
    
    # Í≤∞Í≥º ÌÜµÍ≥Ñ
    total = len(test_scenarios)
    passed = 0
    failed = 0
    
    print(f"\nüß™ Running {total} test scenarios...")
    print("-" * 70)
    
    for scenario in test_scenarios:
        result = run_test_scenario(scenario)
        if result and scenario.expected_filter_type != "no filter":
            passed += 1
            print("      ‚úÖ PASS: Filter generated as expected")
        elif not result and scenario.expected_filter_type == "no filter":
            passed += 1
            print("      ‚úÖ PASS: No filter generated (as expected)")
        else:
            failed += 1
            print("      ‚ùå FAIL: Unexpected filter behavior")
    
    # ÏµúÏ¢Ö Í≤∞Í≥º Ï∂úÎ†•
    print("\n" + "=" * 70)
    print("TEST SUMMARY")
    print("=" * 70)
    print(f"Total Tests: {total}")
    print(f"Passed: {passed} ({passed/total*100:.1f}%)")
    print(f"Failed: {failed} ({failed/total*100:.1f}%)")
    
    # ÏÑ±Í≥µÎ•†Ïóê Îî∞Î•∏ ÌèâÍ∞Ä
    success_rate = passed / total * 100
    print("\nOverall Assessment:")
    if success_rate >= 80:
        print("‚úÖ EXCELLENT: Filter generation working well")
    elif success_rate >= 60:
        print("‚ö†Ô∏è GOOD: Filter generation mostly working")
    elif success_rate >= 40:
        print("‚ö†Ô∏è FAIR: Filter generation needs improvement")
    else:
        print("‚ùå POOR: Filter generation has significant issues")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)